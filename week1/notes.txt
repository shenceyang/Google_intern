
- first line always write "use strict": run in strict mode

------------------------------------------------Module-----------------------------------------------------

-benefits of using module:
    1. improve code maintainability

    2. dont have to write code from scratch, module can be referenced elsewhere

    3. using module avoid function and var name collision. Functions and vars with same name 
    can exist in diff modules
    

- how to load customed module:

    1. export single function:
            'use strict';
            var s = 'Hello';
            function greet(name) {
                console.log(s + ', ' + name + '!');
            }
            module.exports = greet;


        in index.js: 
            'use strict';
            var greet = require('./hello');
            var s = 'Michael';
            greet(s); // Hello, Michael!


    2. wrap multiple functions and export: 

        in hello.js:
                function hello() {
                    console.log('Hello, world!');
                }
                function greet(name) {
                    console.log('Hello, ' + name + '!');
                }

                module.exports = {
                    hello: hello,
                    greet: greet
                };

   
    3. export class:
        //hello.js:
        function Hello() { 
            var name; 
            this.setName = function(thyName) { 
                name = thyName; 
            }; 
            this.sayHello = function() { 
                console.log('Hello ' + name); 
            }; 
        }; 
        module.exports = Hello;


        //main.js 
        var Hello = require('./hello'); 
        hello = new Hello(); 
        hello.setName('BYVoid'); 
        hello.sayHello();       

------------------------------------------------Module-----------------------------------------------------





------------------------------------------------Process-----------------------------------------------------

-process.nextTick(): is a method that allows you to schedule a callback function to be invoked in the next iteration 
of the event loop, after the current operation completes(sync function), but before the event loop continues with the next phase.

    eg. process.nextTick(() => {
          console.log('This will run on the next iteration of the event loop.');
        });

        console.log('This will run immediately.');

    output: This will run immediately.
            This will run on the next iteration of the event loop.

Even though process.nextTick() is placed before the immediate console.log, it will execute afterwards,
showing that the event loop has moved to the next tick to process the callback.



- The process.on('exit', callback) event listener in Node.js is used to execute a callback function when
the Node.js process is about to exit. The exit event is emitted when the Node.js event loop has no additional 
work to perform and the process is about to terminate.

    eg. process.on('exit', function (code) {
           console.log('about to exit with code: ' + code);
        });



- how to know if JS running env (node or browser):

    if (typeof(window) === 'undefined') {
        console.log('node.js');
    } else {
        console.log('browser');
    }
------------------------------------------------Process-----------------------------------------------------    





------------------------------------------------Node Async and Callback----------------------------------------------

-Callback: will be excuted after the task function is completed


- blocking code: the process need wait and during the wait, you cant do other operation.

    var fs = require("fs");
    var data = fs.readFileSync('input.txt');
    console.log(data.toString());
    console.log("program end");

    => output:
    123
    program end

    // when read complete, execute next line

- non-blocking code: you can do other operation while waiting

    var fs = require("fs");
    fs.readFile('input.txt', function (err, data) {
        if (err) return console.error(err);
        console.log(data.toString());
    });

    console.log("program end");


   => output:
    program end
    123 

    // excute next line directly, when read complete, execute callback.



-Callback hell: nested callback
    fs.readFile('/a.json', (err, data) => {
      if (err !== null) {
        fs.readFile('/b.json',(err,data) =>{
            //callback inside callback
        })
      }
    })

=> can be solve by 1. promise
                   2. async and await


1. Promise: promise is a object that hold the eventual result of an async operation. 
it has three states: pending, resolved, rejected.

-code:
    const promiseFunction = new Promise((resolve, reject) => {
          const add = (a, b) => a + b;  
          resolve(add(2, 2));
          });
          
    promiseFunction.then((response) => { console.log(response);})
                    .catch((error) => {  console.log(error);});


-order:
let promise = new Promise(((resolve, reject) => {
    console.log('Step1');       //execute immediately after promise created
    resolve();
}));

promise.then(() => {
    console.log('Step3');
});

console.log('Step2');

=> output:
Step1
Step2
Step3






2.async and await:

//asyn call
const logAsync = () => {
    return new Promise(resolve => {
        setTimeout(() => resolve('小马哥'), 1000)
    })
}

//use async and await to call async
const doSomething = async () => {
    const resolveValue = await logAsync();
    console.log(resolveValue);
}

console.log('before')
doSomething();
console.log('after')

=> output:
before
after
小马哥

-async会让所有后面接的函数都变成Promise，即使后面的函数没有显示的返回Promise。


- code example:

    -premise:

        const getUserInfo = () => {
          return fetch('/users.json') // 获取用户列表
            .then(response => response.json()) // 解析 JSON
            .then(users => users[0]) // 选择第一个用户
            .then(user => fetch(`/users/${user.name}`)) // 获取用户数据
            .then(userResponse => userResponse.json()) // 解析 JSON
        }
        
        getUserInfo()


    -async and await : 
        const getUserInfo = async () => {
            const response = await fetch('/users.json') // 获取用户列表
            const users = await response.json() // 解析 JSON
            const user = users[0] // 选择第一个用户
            const userResponse = await fetch(`/users/${user.name}`) // 获取用户数据
            const userData = await userResponse.json() // 解析 JSON
            return userData
        }

        getUserInfo()



-diff between async await and promise:

Promises: A Promise is an object representing the eventual completion or failure of an asynchronous operation. 
It allows you to write asynchronous code in a more synchronous fashion, using .then() for success callbacks and 
.catch() for handling errors.

async/await: This is syntactic sugar built on top of Promises, introduced to simplify asynchronous code even further.
An async function returns a Promise implicitly, and the await keyword is used inside async functions to wait for
a Promise to resolve. This syntax leads to code that looks and behaves more like traditional synchronous,
blocking code.

------------------------------------------------Node Async and Callback----------------------------------------------